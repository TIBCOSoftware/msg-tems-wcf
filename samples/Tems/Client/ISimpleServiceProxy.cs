//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ServiceModel;
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace = "com.tibco.sample.namespace", ConfigurationName = "IServiceRequestReply", SessionMode = System.ServiceModel.SessionMode.NotAllowed)]
public interface IServiceRequestReply
{

    [System.ServiceModel.OperationContractAttribute(Action = "com.tibco.sample.namespace/IServiceRequestReply/Sample.Action.Id.String", ReplyAction = "com.tibco.sample.namespace/IServiceRequestReply/ServiceMethodResponse")]
    string ServiceMethod(string key);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceRequestReplyChannel : IServiceRequestReply, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class ServiceRequestReplyClient : System.ServiceModel.ClientBase<IServiceRequestReply>, IServiceRequestReply
{
    public ServiceRequestReplyClient()
    {
    }

    public ServiceRequestReplyClient(string endpointConfigurationName) :
        base(endpointConfigurationName)
    {
    }

    public ServiceRequestReplyClient(string endpointConfigurationName, string remoteAddress) :
        base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceRequestReplyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
        base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceRequestReplyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(binding, remoteAddress)
    {
    }

    public string ServiceMethod(string key)
    {
        return base.Channel.ServiceMethod(key);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IServiceRequestReplySession", SessionMode = System.ServiceModel.SessionMode.Required)]
public interface IServiceRequestReplySession
{
    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceRequestReplySession/ServiceMethodRequestReplyInitiatin" +
        "g", ReplyAction = "http://tempuri.org/IServiceRequestReplySession/ServiceMethodRequestReplyInitiatin" +
        "gResponse")]
    string ServiceMethodRequestReplyInitiating(string key);

    [System.ServiceModel.OperationContractAttribute(IsInitiating = false, Action = "http://tempuri.org/IServiceRequestReplySession/ServiceMethodRequestReplySession", ReplyAction = "http://tempuri.org/IServiceRequestReplySession/ServiceMethodRequestReplySessionRe" +
        "sponse")]
    string ServiceMethodRequestReplySession(string key);

    [System.ServiceModel.OperationContractAttribute(IsTerminating = true, Action = "http://tempuri.org/IServiceRequestReplySession/ServiceMethodRequestReplyTerminati" +
        "ng", ReplyAction = "http://tempuri.org/IServiceRequestReplySession/ServiceMethodRequestReplyTerminati" +
        "ngResponse")]
    string ServiceMethodRequestReplyTerminating(string key);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceRequestReplySessionChannel : IServiceRequestReplySession, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class ServiceRequestReplySessionClient : System.ServiceModel.ClientBase<IServiceRequestReplySession>, IServiceRequestReplySession
{
    public ServiceRequestReplySessionClient()
    {
    }

    public ServiceRequestReplySessionClient(string endpointConfigurationName) :
        base(endpointConfigurationName)
    {
    }

    public ServiceRequestReplySessionClient(string endpointConfigurationName, string remoteAddress) :
        base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceRequestReplySessionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
        base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceRequestReplySessionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(binding, remoteAddress)
    {
    }

    public string ServiceMethodRequestReplyInitiating(string key)
    {
        return base.Channel.ServiceMethodRequestReplyInitiating(key);
    }

    public string ServiceMethodRequestReplySession(string key)
    {
        return base.Channel.ServiceMethodRequestReplySession(key);
    }

    public string ServiceMethodRequestReplyTerminating(string key)
    {
        return base.Channel.ServiceMethodRequestReplyTerminating(key);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IServiceDatagramSession", SessionMode = System.ServiceModel.SessionMode.Required)]
public interface IServiceDatagramSession
{
    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceDatagramSession/ServiceMethodDatagramInitiating")]
    void ServiceMethodDatagramInitiating(string key);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, IsInitiating = false, Action = "http://tempuri.org/IServiceDatagramSession/ServiceMethodDatagramSession")]
    void ServiceMethodDatagramSession(string key);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, IsTerminating = true, Action = "http://tempuri.org/IServiceDatagramSession/ServiceMethodDatagramTerminating")]
    void ServiceMethodDatagramTerminating(string key);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceDatagramSessionChannel : IServiceDatagramSession, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class ServiceDatagramSessionClient : System.ServiceModel.ClientBase<IServiceDatagramSession>, IServiceDatagramSession
{
    public ServiceDatagramSessionClient()
    {
    }

    public ServiceDatagramSessionClient(string endpointConfigurationName) :
        base(endpointConfigurationName)
    {
    }

    public ServiceDatagramSessionClient(string endpointConfigurationName, string remoteAddress) :
        base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceDatagramSessionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
        base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceDatagramSessionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(binding, remoteAddress)
    {
    }

    public void ServiceMethodDatagramInitiating(string key)
    {
        base.Channel.ServiceMethodDatagramInitiating(key);
    }

    public void ServiceMethodDatagramSession(string key)
    {
        base.Channel.ServiceMethodDatagramSession(key);
    }

    public void ServiceMethodDatagramTerminating(string key)
    {
        base.Channel.ServiceMethodDatagramTerminating(key);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IServiceDatagram")]
public interface IServiceDatagram
{
    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceDatagram/ServiceMethodDatagram")]
    void ServiceMethodDatagram(string key);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceDatagramChannel : IServiceDatagram, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class ServiceDatagramClient : System.ServiceModel.ClientBase<IServiceDatagram>, IServiceDatagram
{
    public ServiceDatagramClient()
    {
    }

    public ServiceDatagramClient(string endpointConfigurationName) :
        base(endpointConfigurationName)
    {
    }

    public ServiceDatagramClient(string endpointConfigurationName, string remoteAddress) :
        base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceDatagramClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
        base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceDatagramClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(binding, remoteAddress)
    {
    }

    public void ServiceMethodDatagram(string key)
    {
        base.Channel.ServiceMethodDatagram(key);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IServiceDuplexSession", CallbackContract = typeof(IServiceDuplexSessionCallback), SessionMode = System.ServiceModel.SessionMode.Required)]
public interface IServiceDuplexSession
{
    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, IsInitiating = true, Action = "http://tempuri.org/IServiceDuplexSession/ServiceMethodDuplexInitiating")]
    void ServiceMethodDuplexInitiating(string key);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, IsInitiating = false, IsTerminating = false, Action = "http://tempuri.org/IServiceDuplexSession/ServiceMethodDuplexSession")]
    void ServiceMethodDuplexSession(string key);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, IsInitiating = false, IsTerminating = false, Action = "http://tempuri.org/IServiceDuplexSession/ServiceMethodThreeDuplexSession")]
    void ServiceMethodThreeDuplexSession(string key);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, IsTerminating = true, Action = "http://tempuri.org/IServiceDuplexSession/ServiceMethodDuplexTerminating")]
    void ServiceMethodDuplexTerminating(string key);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceDuplexSessionCallback
{
    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceDuplexSession/CallbackMethodOne")]
    void CallbackMethodOne(string key);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceDuplexSession/CallbackMethodTwo")]
    void CallbackMethodTwo(string key);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceDuplexSession/CallbackMethodThree")]
    void CallbackMethodThree(string key);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceDuplexSessionChannel : IServiceDuplexSession, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class ServiceDuplexSessionClient : System.ServiceModel.DuplexClientBase<IServiceDuplexSession>, IServiceDuplexSession
{
    public ServiceDuplexSessionClient(System.ServiceModel.InstanceContext callbackInstance) :
        base(callbackInstance)
    {
    }

    public ServiceDuplexSessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) :
        base(callbackInstance, endpointConfigurationName)
    {
    }

    public ServiceDuplexSessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) :
        base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceDuplexSessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
        base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceDuplexSessionClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(callbackInstance, binding, remoteAddress)
    {
    }

    public void ServiceMethodDuplexInitiating(string key)
    {
        base.Channel.ServiceMethodDuplexInitiating(key);
    }

    public void ServiceMethodDuplexSession(string key)
    {
        base.Channel.ServiceMethodDuplexSession(key);
    }

    public void ServiceMethodThreeDuplexSession(string key)
    {
        base.Channel.ServiceMethodThreeDuplexSession(key);
    }

    public void ServiceMethodDuplexTerminating(string key)
    {
        base.Channel.ServiceMethodDuplexTerminating(key);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IServiceDuplex", CallbackContract = typeof(IServiceDuplexCallback), SessionMode = System.ServiceModel.SessionMode.NotAllowed)]
public interface IServiceDuplex
{
    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceDuplex/ServiceMethodOne")]
    void ServiceMethodOne(string key);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceDuplex/ServiceMethodTwo")]
    void ServiceMethodTwo(string key);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceDuplex/ServiceMethodThree")]
    void ServiceMethodThree(string key);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceDuplexCallback
{
    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceDuplex/CallbackMethodOne")]
    void CallbackMethodOne(string key);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceDuplex/CallbackMethodTwo")]
    void CallbackMethodTwo(string key);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceDuplex/CallbackMethodThree")]
    void CallbackMethodThree(string key);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceDuplexChannel : IServiceDuplex, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class ServiceDuplexClient : System.ServiceModel.DuplexClientBase<IServiceDuplex>, IServiceDuplex
{
    public ServiceDuplexClient(System.ServiceModel.InstanceContext callbackInstance) :
        base(callbackInstance)
    {
    }

    public ServiceDuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) :
        base(callbackInstance, endpointConfigurationName)
    {
    }

    public ServiceDuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) :
        base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceDuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
        base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceDuplexClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(callbackInstance, binding, remoteAddress)
    {
    }

    public void ServiceMethodOne(string key)
    {
        base.Channel.ServiceMethodOne(key);
    }

    public void ServiceMethodTwo(string key)
    {
        base.Channel.ServiceMethodTwo(key);
    }

    public void ServiceMethodThree(string key)
    {
        base.Channel.ServiceMethodThree(key);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IServiceRequestReplyAsync")]
public interface IServiceRequestReplyAsync
{
    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceRequestReplyAsync/ServiceMethodAsync", ReplyAction = "http://tempuri.org/IServiceRequestReplyAsync/ServiceMethodAsyncResponse")]
    string ServiceMethodAsync(string key);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IServiceRequestReplyAsync/ServiceMethodAsync", ReplyAction = "http://tempuri.org/IServiceRequestReplyAsync/ServiceMethodAsyncResponse")]
    System.IAsyncResult BeginServiceMethodAsync(string key, System.AsyncCallback callback, object asyncState);

    string EndServiceMethodAsync(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceRequestReplyAsyncChannel : IServiceRequestReplyAsync, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class ServiceRequestReplyAsyncClient : System.ServiceModel.ClientBase<IServiceRequestReplyAsync>, IServiceRequestReplyAsync
{
    public ServiceRequestReplyAsyncClient()
    {
    }

    public ServiceRequestReplyAsyncClient(string endpointConfigurationName) :
        base(endpointConfigurationName)
    {
    }

    public ServiceRequestReplyAsyncClient(string endpointConfigurationName, string remoteAddress) :
        base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceRequestReplyAsyncClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
        base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceRequestReplyAsyncClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(binding, remoteAddress)
    {
    }

    public string ServiceMethodAsync(string key)
    {
        return base.Channel.ServiceMethodAsync(key);
    }

    public System.IAsyncResult BeginServiceMethodAsync(string key, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginServiceMethodAsync(key, callback, asyncState);
    }

    public string EndServiceMethodAsync(System.IAsyncResult result)
    {
        return base.Channel.EndServiceMethodAsync(result);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IServiceDuplexTransaction", SessionMode = System.ServiceModel.SessionMode.Required, CallbackContract = typeof(IServiceDuplexTransactionCallback))]
public interface IServiceDuplexTransaction
{

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceDuplexTransaction/ServiceTransactionMethodOne")]
    [TransactionFlow(TransactionFlowOption.Mandatory)]
    void ServiceTransactionMethodOne(string key);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceDuplexTransaction/ServiceTransactionMethodTwo")]
    [TransactionFlow(TransactionFlowOption.Mandatory)]
    void ServiceTransactionMethodTwo(string key);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceDuplexTransaction/ServiceTransactionMethodThree")]
    [TransactionFlow(TransactionFlowOption.Mandatory)]
    void ServiceTransactionMethodThree(string key);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceDuplexTransactionCallback
{

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceDuplexTransaction/CallbackTransactionMethodOne")]
    [TransactionFlow(TransactionFlowOption.Mandatory)]
    void CallbackTransactionMethodOne(string key);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceDuplexTransaction/CallbackTransactionMethodTwo")]
    [TransactionFlow(TransactionFlowOption.Mandatory)]
    void CallbackTransactionMethodTwo(string key);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceDuplexTransaction/CallbackTransactionMethodThree")]
    [TransactionFlow(TransactionFlowOption.Mandatory)]
    void CallbackTransactionMethodThree(string key);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceDuplexTransactionChannel : IServiceDuplexTransaction, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class ServiceDuplexTransactionClient : System.ServiceModel.DuplexClientBase<IServiceDuplexTransaction>, IServiceDuplexTransaction
{
    public ServiceDuplexTransactionClient(System.ServiceModel.InstanceContext callbackInstance) :
        base(callbackInstance)
    {
    }

    public ServiceDuplexTransactionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) :
        base(callbackInstance, endpointConfigurationName)
    {
    }

    public ServiceDuplexTransactionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) :
        base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceDuplexTransactionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
        base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceDuplexTransactionClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(callbackInstance, binding, remoteAddress)
    {
    }

    public void ServiceTransactionMethodOne(string key)
    {
        base.Channel.ServiceTransactionMethodOne(key);
    }

    public void ServiceTransactionMethodTwo(string key)
    {
        base.Channel.ServiceTransactionMethodTwo(key);
    }

    public void ServiceTransactionMethodThree(string key)
    {
        base.Channel.ServiceTransactionMethodThree(key);
    }
}
